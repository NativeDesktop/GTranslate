"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildNativefierApp = void 0;
const path = require("path");
const electronGet = require("@electron/get");
const electronPackager = require("electron-packager");
const hasbin = require("hasbin");
const log = require("loglevel");
const buildIcon_1 = require("./buildIcon");
const helpers_1 = require("../helpers/helpers");
const optionsMain_1 = require("../options/optionsMain");
const prepareElectronApp_1 = require("./prepareElectronApp");
const OPTIONS_REQUIRING_WINDOWS_FOR_WINDOWS_BUILD = [
    'icon',
    'appCopyright',
    'appVersion',
    'buildVersion',
    'versionString',
    'win32metadata',
];
/**
 * Checks the app path array to determine if packaging completed successfully
 */
function getAppPath(appPath) {
    if (!Array.isArray(appPath)) {
        return appPath;
    }
    if (appPath.length === 0) {
        return null; // directory already exists and `--overwrite` not set
    }
    if (appPath.length > 1) {
        log.warn('Warning: This should not be happening, packaged app path contains more than one element:', appPath);
    }
    return appPath[0];
}
/**
 * For Windows & Linux, we have to copy over the icon to the resources/app
 * folder, which the BrowserWindow is hard-coded to read the icon from
 */
async function copyIconsIfNecessary(options, appPath) {
    log.debug('Copying icons if necessary');
    if (!options.packager.icon) {
        log.debug('No icon specified in options; aborting');
        return;
    }
    if (options.packager.platform === 'darwin' ||
        options.packager.platform === 'mas') {
        log.debug('No copying necessary on macOS; aborting');
        return;
    }
    // windows & linux: put the icon file into the app
    const destFileName = `icon${path.extname(options.packager.icon)}`;
    const destIconPath = path.join(appPath, destFileName);
    log.debug(`Copying icon ${options.packager.icon} to`, destIconPath);
    await helpers_1.copyFileOrDir(options.packager.icon, destIconPath);
}
function trimUnprocessableOptions(options) {
    if (options.packager.platform === 'win32' &&
        !helpers_1.isWindows() &&
        !hasbin.sync('wine')) {
        const optionsPresent = Object.entries(options)
            .filter(([key, value]) => OPTIONS_REQUIRING_WINDOWS_FOR_WINDOWS_BUILD.includes(key) && !!value)
            .map(([key]) => key);
        if (optionsPresent.length === 0) {
            return;
        }
        log.warn(`*Not* setting [${optionsPresent.join(', ')}], as couldn't find Wine.`, 'Wine is required when packaging a Windows app under on non-Windows platforms.', 'Also, note that Windows apps built under non-Windows platforms without Wine *will lack* certain', 'features, like a correct icon and process name. Do yourself a favor and install Wine, please.');
        for (const keyToUnset of optionsPresent) {
            options[keyToUnset] = null;
        }
    }
}
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
async function buildNativefierApp(rawOptions) {
    log.info('Processing options...');
    const options = await optionsMain_1.getOptions(rawOptions);
    if (options.packager.platform === 'darwin' && helpers_1.isWindows()) {
        // electron-packager has to extract the desired electron package for the target platform.
        // For a target platform of Mac, this zip file contains symlinks. And on Windows, extracting
        // files that are symlinks need Admin permissions. So we'll check if the user is an admin, and
        // fail early if not.
        // For reference
        // https://github.com/electron/electron-packager/issues/933
        // https://github.com/electron/electron-packager/issues/1194
        // https://github.com/electron/electron/issues/11094
        if (!helpers_1.isWindowsAdmin()) {
            throw new Error('Building an app with a target platform of Mac on a Windows machine requires admin priveleges to perform. Please rerun this command in an admin command prompt.');
        }
    }
    log.info('\nPreparing Electron app...');
    const tmpPath = helpers_1.getTempDir('app', 0o755);
    await prepareElectronApp_1.prepareElectronApp(options.packager.dir, tmpPath, options);
    log.info('\nConverting icons...');
    options.packager.dir = tmpPath; // const optionsWithTmpPath = { ...options, dir: tmpPath };
    buildIcon_1.convertIconIfNecessary(options);
    await copyIconsIfNecessary(options, tmpPath);
    log.info("\nPackaging... This will take a few seconds, maybe minutes if the requested Electron isn't cached yet...");
    trimUnprocessableOptions(options);
    electronGet.initializeProxy(); // https://github.com/electron/get#proxies
    const appPathArray = await electronPackager(options.packager);
    log.info('\nFinalizing build...');
    const appPath = getAppPath(appPathArray);
    if (appPath) {
        let osRunHelp = '';
        if (options.packager.platform === 'win32') {
            osRunHelp = `the contained .exe file.`;
        }
        else if (options.packager.platform === 'linux') {
            osRunHelp = `the contained executable file (prefixing with ./ if necessary)\nMenu/desktop shortcuts are up to you, because Nativefier cannot know where you're going to move the app. Search for "linux .desktop file" for help, or see https://wiki.archlinux.org/index.php/Desktop_entries`;
        }
        else if (options.packager.platform === 'darwin') {
            osRunHelp = `the app bundle.`;
        }
        log.info(`App built to ${appPath}, move to wherever it makes sense for you and run ${osRunHelp}`);
    }
    return appPath;
}
exports.buildNativefierApp = buildNativefierApp;
//# sourceMappingURL=buildNativefierApp.js.map