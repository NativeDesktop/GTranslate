"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertToIcns = exports.convertToIco = exports.convertToPng = exports.singleIco = void 0;
const path = require("path");
const child_process_1 = require("child_process");
const helpers_1 = require("./helpers");
const log = require("loglevel");
const SCRIPT_PATHS = {
    singleIco: path.join(__dirname, '../..', 'icon-scripts/singleIco'),
    convertToPng: path.join(__dirname, '../..', 'icon-scripts/convertToPng'),
    convertToIco: path.join(__dirname, '../..', 'icon-scripts/convertToIco'),
    convertToIcns: path.join(__dirname, '../..', 'icon-scripts/convertToIcns'),
};
/**
 * Executes a shell script with the form "./pathToScript param1 param2"
 */
function iconShellHelper(shellScriptPath, icoSource, icoDestination) {
    if (helpers_1.isWindows()) {
        throw new Error('Icon conversion only supported on macOS or Linux. ' +
            'If building for Windows, download/create a .ico and pass it with --icon favicon.ico . ' +
            'If building for macOS/Linux, do it from macOS/Linux');
    }
    const shellCommand = `"${shellScriptPath}" "${icoSource}" "${icoDestination}"`;
    log.debug(`Converting icon ${icoSource} to ${icoDestination}.`, `Calling shell command: ${shellCommand}`);
    const { stdout, stderr, status } = child_process_1.spawnSync(shellScriptPath, [icoSource, icoDestination], { timeout: 10000 });
    if (status) {
        throw new Error(`Icon conversion failed with status code ${status}.\nstdout: ${stdout.toString()}\nstderr: ${stderr.toString()}`);
    }
    log.debug(`Conversion succeeded and produced icon at ${icoDestination}`);
    return icoDestination;
}
function singleIco(icoSrc) {
    return iconShellHelper(SCRIPT_PATHS.singleIco, icoSrc, `${helpers_1.getTempDir('iconconv')}/icon.ico`);
}
exports.singleIco = singleIco;
function convertToPng(icoSrc) {
    return iconShellHelper(SCRIPT_PATHS.convertToPng, icoSrc, `${helpers_1.getTempDir('iconconv')}/icon.png`);
}
exports.convertToPng = convertToPng;
function convertToIco(icoSrc) {
    return iconShellHelper(SCRIPT_PATHS.convertToIco, icoSrc, `${helpers_1.getTempDir('iconconv')}/icon.ico`);
}
exports.convertToIco = convertToIco;
function convertToIcns(icoSrc) {
    if (!helpers_1.isOSX()) {
        throw new Error('macOS is required to convert to a .icns icon');
    }
    return iconShellHelper(SCRIPT_PATHS.convertToIcns, icoSrc, `${helpers_1.getTempDir('iconconv')}/icon.icns`);
}
exports.convertToIcns = convertToIcns;
//# sourceMappingURL=iconShellHelpers.js.map